{"version":3,"file":"static/js/509.d9f178e5.chunk.js","mappings":"0RAEaA,EAAOC,EAAAA,GAAAA,GAAH,uKAUJC,EAAcD,EAAAA,GAAAA,IAAH,yFAMXE,EAAOF,EAAAA,GAAAA,GAAH,+MASJG,EAAOH,EAAAA,GAAAA,EAAH,0FAMJI,EAAYJ,EAAAA,GAAAA,EAAH,+C,6BCatB,EArCa,WACT,OAA0BK,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACOC,GAAWC,EAAAA,EAAAA,MAAXD,SAEPE,EAAAA,EAAAA,YAAU,WACR,GAAGJ,EAAO,CACR,IAAMK,EAAS,mCAAG,8GAEKC,EAAAA,EAAAA,IAAaJ,GAFlB,cAERK,EAFQ,OAGdN,EAASM,GAHK,mDAOdN,EAAS,MAPK,yDAAH,qDASfI,GACH,CACA,GAAE,CAACL,EAAOE,IAEX,IAAMM,EAAWR,EAAMS,KAAI,gBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,aAAcC,EAA1B,EAA0BA,UAA1B,OACtB,UAACjB,EAAD,YACC,SAACD,EAAD,CAAamB,IAAKF,EAAeG,EAAAA,GAAU,UAAMH,GAAiBI,EAAgBC,IAAKN,KACvF,SAACd,EAAD,UAAOc,KACP,SAACb,EAAD,UAAYe,MAHFH,EADW,IAO3B,OACE,yBACCV,EAAMkB,QAAU,GAAK,SAACzB,EAAD,UACnBe,KAED,SAAC,KAAD,sDAIP,C,6OC1CYW,EAAgBzB,EAAAA,GAAAA,IAAH,qVAiBb0B,EAAc1B,EAAAA,GAAAA,GAAH,+KASX2B,EAAa3B,EAAAA,GAAAA,GAAH,6CAIV4B,EAAa5B,EAAAA,GAAAA,EAAH,wGAMV6B,EAAa7B,EAAAA,GAAAA,KAAH,uGAOV8B,EAAa9B,EAAAA,GAAAA,EAAH,gEAKV+B,EAAO/B,EAAAA,GAAAA,GAAF,gO,2NChDlBgC,EAAAA,EAAAA,SAAAA,QAAwB,gCACxB,IAAMC,EAAS,mCAEFZ,EAAa,kCAEba,EAAW,mCAAG,WAAMC,GAAN,uFACDH,EAAAA,EAAAA,IAAA,qCAAwCC,EAAxC,iBAAuDE,IADtD,cAClBC,EADkB,yBAEjBA,EAASvB,KAAKwB,SAFG,2CAAH,sDAKXC,EAAe,mCAAG,WAAMC,EAAOJ,GAAb,uFACLH,EAAAA,EAAAA,IAAA,+BAAkCC,EAAlC,iCAAiEM,EAAjE,iBAA+EJ,EAA/E,yBADK,cACtBC,EADsB,yBAErBA,EAASvB,KAAKwB,SAFO,2CAAH,wDAKfG,EAAe,mCAAG,WAAOhC,GAAP,uFACLwB,EAAAA,EAAAA,IAAA,gBAAmBxB,EAAnB,oBAAsCyB,EAAtC,oBADK,cACtBG,EADsB,yBAErBA,EAASvB,MAFY,2CAAH,sDAKfD,EAAY,mCAAG,WAAOJ,GAAP,uFACFwB,EAAAA,EAAAA,IAAA,gBAAmBxB,EAAnB,4BAA8CyB,EAA9C,oBADE,cACnBG,EADmB,yBAElBA,EAASvB,KAAK4B,MAFI,2CAAH,sDAKZC,EAAe,mCAAG,WAAOlC,GAAP,uFACLwB,EAAAA,EAAAA,IAAA,gBAAmBxB,EAAnB,4BAA8CyB,EAA9C,2BADK,cACtBG,EADsB,yBAErBA,EAASvB,KAAKwB,SAFO,2CAAH,qD","sources":["components/Cast/cast.styled.js","components/Cast/Cast.jsx","components/Reviews/reviews.styled.js","services/fetch-movie.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n   margin-top: 30px;\n   list-style: none;\n   padding:5px;\n   display:flex;\n   justify-content: center;\n   flex-wrap: wrap;\n   gap:16px;\n`;\n\nexport const ImageActors = styled.img`\n   max-width:  100%;\n   border-radius: 4px;\n   height: 225px;\n`;\n\nexport const Item = styled.li`\n   flex-basis: 150px;\n   box-shadow: rgb(0 0 0 / 12%) 0px 1px 3px, rgb(0 0 0 / 14%) 0px 1px 1px, rgb(0 0 0 / 20%) 0px 2px 1px;\n \n   &:hover {\n      transform: scale(1.05);\n   }\n`;\n\nexport const Info = styled.p`\n   font-size:16px;\n   font-weight: 500;\n   text-align: center;\n`;\n\nexport const Character = styled.p`\n  text-align: center;\n`;","import { useState, useEffect} from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getMovieCast, baseImgUrl } from 'services/fetch-movie';\n\nimport { List, ImageActors, Info, Item, Character } from './cast.styled';\nimport { Title } from 'components/Reviews/reviews.styled';\nimport defaultCastImg from '../../images/cast-default-img.jpg';\n\nconst Cast = () => {\n    const [items, setItems] = useState([]);\n    const {movieId} = useParams();\n\n    useEffect(() => {\n      if(items) {\n        const fetchCast = async() => {\n          try{\n            const data = await getMovieCast(movieId);\n            setItems(data);\n            return;\n           }\n          catch{\n            setItems(null);\n        }};\n        fetchCast();\n    };\n    }, [items, movieId]);\n\n    const elements = items.map(({id, name, profile_path, character}) => \n        (<Item key={id}>\n          <ImageActors src={profile_path ? baseImgUrl + `${profile_path}` : defaultCastImg} alt={name} />\n          <Info>{name}</Info>\n          <Character>{character}</Character>\n        </Item>));\n\n    return (\n      <div>\n      {items.length >= 1 ? (<List>\n        {elements}\n        </List>) : ( \n        <Title>We don't have any cast for this movie.</Title>\n      )}\n      </div>\n    );\n};\n\nexport default Cast;","import styled from 'styled-components';\n\nexport const WrapperReview = styled.div`\n  border-radius: 10px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);\n  margin: 12px 0;\n  width: 100%;\n  max-width: 1200px;\n  height: 100%;\n  transition: all 0.2s ease-in-out;\n  padding: 5px;\n \n  &:hover {\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.8);\n    backdrop-filter: blur(5px);\n    color: #000000;\n  }\n`;\n\nexport const ReviewsList = styled.ul`\n    list-style: none;\n    padding:30px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n`;\n\nexport const ReviewItem = styled.li`\n    // padding:5px;\n`;\n\nexport const AuthorText = styled.p`\n   font-weight: bold;\n   font-size: 20px;\n   font-family: 'Gambetta', serif;\n`; \n\nexport const AuthorSpan = styled.span`\n   font-weight: 400;\n   font-size:20px;\n   \n   text-decoration: underline;\n`;\n\nexport const TextReview = styled.p`\n  font-size:18px;\n  line-height: 1.2;\n`;\n\nexport const Title= styled.h2`\n    font-family: 'Gambetta', serif;\n    font-variation-settings: \"wght\" 311;\n    margin-top:30px;\n    margin-bottom: 0.8rem;\n    font-weight: bold;\n    margin-left: 20px;\n    font-size: 28px;\n`;","import axios from 'axios';\n\naxios.defaults.baseURL ='https://api.themoviedb.org/3/';\nconst apiKey = '0d4113c4d386d0ed78ee145d93be1c52';\n\nexport const baseImgUrl = 'https://image.tmdb.org/t/p/w500';;\n\nexport const getAllMovie = async(page) => {\n   const response = await axios.get(`trending/movie/day?api_key=${apiKey}&page=${page}`);\n   return response.data.results;\n};\n\nexport const getSearchMovies = async(query, page) => {\n   const response = await axios.get(`search/movie?api_key=${apiKey}&language=en-US&query=${query}&page=${page}&include_adult=false`);\n   return response.data.results;\n};\n\nexport const getMovieDetails = async (movieId) => {\n   const response = await axios.get(`movie/${movieId}?api_key=${apiKey}&language=en-US`);\n   return response.data;\n};\n\nexport const getMovieCast = async (movieId) => {\n   const response = await axios.get(`movie/${movieId}/credits?api_key=${apiKey}&language=en-US`);\n   return response.data.cast;\n};\n\nexport const getMovieReviews = async (movieId) => {\n   const response = await axios.get(`movie/${movieId}/reviews?api_key=${apiKey}&language=en-US&page=1`);\n   return response.data.results;\n};"],"names":["List","styled","ImageActors","Item","Info","Character","useState","items","setItems","movieId","useParams","useEffect","fetchCast","getMovieCast","data","elements","map","id","name","profile_path","character","src","baseImgUrl","defaultCastImg","alt","length","WrapperReview","ReviewsList","ReviewItem","AuthorText","AuthorSpan","TextReview","Title","axios","apiKey","getAllMovie","page","response","results","getSearchMovies","query","getMovieDetails","cast","getMovieReviews"],"sourceRoot":""}